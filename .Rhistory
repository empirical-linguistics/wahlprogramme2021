for(i in 1:length(unique(tri_count$Partei))) {
prt <- unique(tri_count$Partei)[i]
# current df:
df_not_cur <- tri_count[which(tri_count$Partei != prt),]
df_cur <- tri_count[which(tri_count$Partei == prt),]
tri_count[which(tri_count$Partei == prt),]$llr <- llr(freq1 = as.numeric(df_cur$Freq),
freq2 = as.numeric(df_cur$Freq_all),
corpus_size1 = sum(df_cur$Freq),
corpus_size2 = sum(df_not_cur$Freq_all))
# p-Werte hinzufügen:
tri_count[which(tri_count$Partei == prt),]$p_value <- pchisq(tri_count[which(tri_count$Partei == prt),]$llr, df = 1, lower.tail = FALSE)
}
# Funktion für odds ratio
odds_ratio <- Vectorize(function(freq1, freq2, corpus_size1, corpus_size2) {
observed <- matrix(c(freq1, corpus_size1 - freq1,
freq2, corpus_size2 - freq2),
ncol = 2)
return(
(observed[1,1] / observed[2,1]) / (observed[1,2] / observed[2,2])
)
})
# Normalisierte Frequenz hinzufügen
tri_count$fpmt_all <- numeric(nrow(tri_count))
tri_count$fpmt <- numeric(nrow(tri_count))
for(i in 1:length(unique(tri_count$Partei))) {
tri_count[tri_count$Partei==unique(tri_count$Partei)[i],]$fpmt <- filter(tri_count, Partei == unique(tri_count$Partei)[i])$Freq / nrow(filter(tri_count, Partei != unique(tri_count$Partei)[i]))
}
for(i in 1:length(unique(tri_count$Partei))) {
tri_count[tri_count$Partei==unique(tri_count$Partei)[i],]$fpmt_all <- filter(tri_count, Partei == unique(tri_count$Partei)[i])$Freq / nrow(filter(tri_count, Partei == unique(tri_count$Partei)[i]))
}
# Funktion anwenden
tri_count$odds_ratio <- numeric(nrow(tri_count))
for(i in 1:length(unique(tri_count$Partei))) {
prt = unique(tri_count$Partei)[i]
tri_count[tri_count$Partei==prt,]$odds_ratio <- odds_ratio(freq1 = filter(tri_count, Partei == prt)$Freq,
freq2 = filter(tri_count, Partei == prt)$Freq_all, corpus_size1 = nrow(filter(tri_count, Partei==prt)), corpus_size2 = nrow(filter(tri_count, Partei != prt)))
}
# Funktion, die ausgibt, ob eines von drei Wörtern in Stopwords enthalten ist:
in_stopwords <- Vectorize(function(x) {
x <- unlist(strsplit(x, " "))
return(length(which(x %in% stopwords("de"))))
})
# Funktion benutzen:
tri_count$in_stopwords <- unname(in_stopwords(tri_count$trigram))
tri_count %>% bind_tf_idf(term = trigram, document = Partei, n = Freq) %>% select(Partei, trigram, tf, idf, tf_idf) %>% arrange(desc(tf_idf))
abline(h = 0.05)
?chisq.test
chis <- function(a,b,c,d, p = FALSE) {
t1 <- chisq.test(matrix(c(a,b,c,d)), correct = FALSE)
if(p) {
return(t1$p.value)
} else {
return(t1$statistic)
}
}
plot(
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15)))),
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15, p = TRUE)))),
xlab = "X2", ylab = "p-value", xlim = c(0,50)
)
abline(v = 3.84)
abline(h = 0.05)
text(8, 0.5, "3.84")
text(30, 0.5, "Beispiel:\nc(10,(1:100),10,15)")
chis <- function(a,b,c,d, p = FALSE) {
t1 <- chisq.test(matrix(c(a,b,c,d)), correct = FALSE)
if(p) {
return(pchisq(t1$statistic, 1, lower.tail = FALSE))
} else {
return(t1$statistic)
}
}
plot(
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15)))),
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15, p = TRUE)))),
xlab = "X2", ylab = "p-value", xlim = c(0,50)
)
abline(v = 3.84)
abline(h = 0.05)
text(8, 0.5, "3.84")
text(30, 0.5, "Beispiel:\nc(10,(1:100),10,15)")
text(8, 0.25, "3.84")
text(8, 0.15, "3.84")
plot(
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15)))),
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15, p = TRUE)))),
xlab = "X2", ylab = "p-value", xlim = c(0,50)
)
abline(v = 3.84)
abline(h = 0.05)
text(8, 0.15, "3.84")
text(30, 0.15, "Beispiel:\nc(10,(1:100),10,15)")
plot(
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15)))),
unname(unlist(sapply(1:100, function(i) chis(10,i,10,15, p = TRUE)))),
xlab = "X2", ylab = "p-value", xlim = c(0,50)
)
abline(v = 3.84)
abline(h = 0.05)
text(6, 0.15, "3.84")
text(30, 0.15, "Beispiel:\nc(10,(1:100),10,15)")
tri_count$in_stopwords
cdu_text <- pdftools::pdf_text("https://www.ein-guter-plan-fuer-deutschland.de/programm/CDU_Beschluss%20Regierungsprogramm.pdf")
# saveRDS(linke, "linke.Rds")
# saveRDS(afd, "afd.Rds")
saveRDS(cdu, "cdu.Rds")
# saveRDS(linke, "linke.Rds")
# saveRDS(afd, "afd.Rds")
saveRDS(cdu_text, "cdu.Rds")
cdu_text
cdu <- count_tokens(cdu_text)
cdu_size <- sum(cdu$Freq)
cdu <- association_measures(cdu)
cdu200 <- head(cdu, 200)
wordcloud(words = cdu200$Token, freq = cdu200$LLR/20, col = "black", scale = c(5, .05))
set.seed(1985)
png("wordclouds01.png", width = 6, height = 6, un = "in", res = 600)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(words = gruene200$Token, freq = gruene200$LLR/20, col = "green", scale = c(3, .01))
wordcloud(words = afd200$Token, freq = afd200$LLR/20, col = "blue", scale = c(6, .2))
wordcloud(words = fdp200$Token, freq = fdp200$LLR/20, col = "yellow3", scale = c(5, .05))
wordcloud(words = cdu200$Token, freq = cdu200$LLR/20, col = "black", scale = c(5, .05))
wordcloud(words = linke200$Token, freq = fdp200$LLR/20, col = "darkred", scale = c(4, .01))
wordcloud(words = spd200$Token, freq = spd200$LLR/20, col = "red", scale = c(3, .01))
dev.off()
par(mfrow = c(1,1))
par(mar = c(5, 4, 4, 2) + 0.1)
set.seed(1985)
png("wordclouds01.png", width = 6, height = 6, un = "in", res = 600)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(words = gruene200$Token, freq = gruene200$LLR/20, col = "green", scale = c(3, .01))
wordcloud(words = afd200$Token, freq = afd200$LLR/20, col = "blue", scale = c(6, .2))
wordcloud(words = fdp200$Token, freq = fdp200$LLR/20, col = "yellow3", scale = c(5, .05))
wordcloud(words = cdu200$Token, freq = cdu200$LLR/20, col = "black", scale = c(4, .05))
wordcloud(words = linke200$Token, freq = fdp200$LLR/20, col = "darkred", scale = c(4, .01))
wordcloud(words = spd200$Token, freq = spd200$LLR/20, col = "red", scale = c(3, .01))
dev.off()
par(mfrow = c(1,1))
par(mar = c(5, 4, 4, 2) + 0.1)
# CDU-Trigramme:
cdu_trigrams <- cdu_text %>% gsub("\\-\n", "", .) %>%  gsub("\n", " ", .) %>% gsub(" +", " ", .) %>% strsplit(., split = "\\.|\\?|!") %>% unlist %>% trimws %>% no_empty %>% as_tibble() %>% unnest_tokens(trigram, value, token="ngrams", n = 3) %>% na.omit
trigrams <- rbind(mutate(afd_trigrams, Partei = "afd"),
mutate(cdu_trigrams, Partei = "cdu"),
mutate(fdp_trigrams, Partei = "fdp"),
mutate(gruene_trigrams, Partei = "gruene"),
mutate(linke_trigrams, Partei = "linke"),
mutate(spd_trigrams, Partei = "spd"))
# Trigramme auszählen, pro Parteiprogramm:
tri_count <- trigrams %>% group_by(Partei, trigram) %>% summarise(
Freq = n()
)
# Trigramme auszählen, Parteiprogrammunabhängig:
tri_all <- trigrams %>% group_by(trigram) %>% summarise(
Freq_all = n()
)
# diese Tabelle mit der oben erstellten verbinden:
tri_count <- left_join(tri_count, tri_all)
# new LLR column for tri_count df:
tri_count$llr <- numeric(nrow(tri_count))
tri_count$p_value <- numeric(nrow(tri_count))
# get LLR for each party:
for(i in 1:length(unique(tri_count$Partei))) {
prt <- unique(tri_count$Partei)[i]
# current df:
df_not_cur <- tri_count[which(tri_count$Partei != prt),]
df_cur <- tri_count[which(tri_count$Partei == prt),]
tri_count[which(tri_count$Partei == prt),]$llr <- llr(freq1 = as.numeric(df_cur$Freq),
freq2 = as.numeric(df_cur$Freq_all),
corpus_size1 = sum(df_cur$Freq),
corpus_size2 = sum(df_not_cur$Freq_all))
# p-Werte hinzufügen:
tri_count[which(tri_count$Partei == prt),]$p_value <- pchisq(tri_count[which(tri_count$Partei == prt),]$llr, df = 1, lower.tail = FALSE)
}
# Funktion für odds ratio
odds_ratio <- Vectorize(function(freq1, freq2, corpus_size1, corpus_size2) {
observed <- matrix(c(freq1, corpus_size1 - freq1,
freq2, corpus_size2 - freq2),
ncol = 2)
return(
(observed[1,1] / observed[2,1]) / (observed[1,2] / observed[2,2])
)
})
# Normalisierte Frequenz hinzufügen
tri_count$fpmt_all <- numeric(nrow(tri_count))
tri_count$fpmt <- numeric(nrow(tri_count))
for(i in 1:length(unique(tri_count$Partei))) {
tri_count[tri_count$Partei==unique(tri_count$Partei)[i],]$fpmt <- filter(tri_count, Partei == unique(tri_count$Partei)[i])$Freq / nrow(filter(tri_count, Partei != unique(tri_count$Partei)[i]))
}
for(i in 1:length(unique(tri_count$Partei))) {
tri_count[tri_count$Partei==unique(tri_count$Partei)[i],]$fpmt_all <- filter(tri_count, Partei == unique(tri_count$Partei)[i])$Freq / nrow(filter(tri_count, Partei == unique(tri_count$Partei)[i]))
}
# Funktion anwenden
tri_count$odds_ratio <- numeric(nrow(tri_count))
for(i in 1:length(unique(tri_count$Partei))) {
prt = unique(tri_count$Partei)[i]
tri_count[tri_count$Partei==prt,]$odds_ratio <- odds_ratio(freq1 = filter(tri_count, Partei == prt)$Freq,
freq2 = filter(tri_count, Partei == prt)$Freq_all, corpus_size1 = nrow(filter(tri_count, Partei==prt)), corpus_size2 = nrow(filter(tri_count, Partei != prt)))
}
# Funktion, die ausgibt, ob eines von drei Wörtern in Stopwords enthalten ist:
in_stopwords <- Vectorize(function(x) {
x <- unlist(strsplit(x, " "))
return(length(which(x %in% stopwords("de"))))
})
# Funktion benutzen:
tri_count$in_stopwords <- unname(in_stopwords(tri_count$trigram))
# Bei der SPD schließen wir die Trigramme aus,
# die aus Boilerplate-ähnlichem Material bestehen
tri_count <- tri_count[which(!tri_count$trigram %in% c("parteivorstand 2021 seite",
"der spd kapitel", "spd parteivorstand 2021", "zukunftsprogramm der spd", "das zukunftsprogramm der", grep("(^| )kapitel( |$)|(^| )seite( |$)", tri_count$trigram, value = T))),]
# Wir schließen außerdem alle Trigramme aus, die nur aus Ziffern bestehen (bei der AfD sehr häufig, wohl wg. Seitenzahlen)
tri_count <- tri_count[grep("^([[:digit:]]| )+$", tri_count$trigram, invert = T),]
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(4, .1), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
# nur ohne Stopwords:
png("trigram_wcs02b.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "spd", in_stopwords == 0)$llr,
scale = c(1.5, .001), colors = "red")
wordcloud(filter(tri_count, Partei == "linke", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "linke", in_stopwords == 0)$llr*2,
scale = c(1, .2), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "fdp", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "cdu", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene", in_stopwords==0)$trigram,
filter(tri_count, Partei == "gruene", in_stopwords == 0)$llr*3,
scale = c(1, .001), colors = "green")
wordcloud(filter(tri_count, Partei == "afd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "afd", in_stopwords == 0)$llr,
scale = c(1.5, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(1.5, .01), colors = "black")
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(1.5, .01), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
# nur ohne Stopwords:
png("trigram_wcs02b.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "spd", in_stopwords == 0)$llr,
scale = c(1.5, .001), colors = "red")
wordcloud(filter(tri_count, Partei == "linke", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "linke", in_stopwords == 0)$llr*2,
scale = c(1, .2), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "fdp", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "cdu", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene", in_stopwords==0)$trigram,
filter(tri_count, Partei == "gruene", in_stopwords == 0)$llr*3,
scale = c(1, .001), colors = "green")
wordcloud(filter(tri_count, Partei == "afd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "afd", in_stopwords == 0)$llr,
scale = c(1.5, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(1.5, .001), colors = "black")
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(2, .01), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
# nur ohne Stopwords:
png("trigram_wcs02b.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "spd", in_stopwords == 0)$llr,
scale = c(1.5, .001), colors = "red")
wordcloud(filter(tri_count, Partei == "linke", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "linke", in_stopwords == 0)$llr*2,
scale = c(1, .2), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "fdp", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "cdu", in_stopwords == 0)$llr,
scale = c(1.5, .02), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene", in_stopwords==0)$trigram,
filter(tri_count, Partei == "gruene", in_stopwords == 0)$llr*3,
scale = c(1, .001), colors = "green")
wordcloud(filter(tri_count, Partei == "afd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "afd", in_stopwords == 0)$llr,
scale = c(1.5, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(2, .1), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
# nur ohne Stopwords:
png("trigram_wcs02b.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "spd", in_stopwords == 0)$llr,
scale = c(1.5, .001), colors = "red")
wordcloud(filter(tri_count, Partei == "linke", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "linke", in_stopwords == 0)$llr*2,
scale = c(1, .2), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "fdp", in_stopwords == 0)$llr,
scale = c(4, .2), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "cdu", in_stopwords == 0)$llr,
scale = c(1, .005), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene", in_stopwords==0)$trigram,
filter(tri_count, Partei == "gruene", in_stopwords == 0)$llr*3,
scale = c(1, .001), colors = "green")
wordcloud(filter(tri_count, Partei == "afd", in_stopwords == 0)$trigram,
filter(tri_count, Partei == "afd", in_stopwords == 0)$llr,
scale = c(1.5, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(2, .1), colors = "black")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(2.5, .2), colors = "black")
warnings()
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(2.5, .05), colors = "black")
warnings()
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr,
scale = c(1, .05), colors = "black")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(1, .05), colors = "black")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(2, .05), colors = "black")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(2, .1), colors = "black")
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(2, .1), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(2, .01), colors = "black")
set.seed(1985)
# mit Stopwords:
png("trigram_wcs02a.png", width = 6, height = 6, un = "in", res = 1200)
# svglite("trigram_wcs02.svg", width = 6, height = 6)
par(mfrow = c(3,2))
par(mar = c(1, 1, 1, 1) + 0.1)
wordcloud(filter(tri_count, Partei == "spd")$trigram,
filter(tri_count, Partei == "spd")$llr,
scale = c(1.2, .01), colors = "red")
wordcloud(filter(tri_count, Partei == "linke")$trigram,
filter(tri_count, Partei == "linke")$llr,
scale = c(1.5, .01), colors = "darkred")
wordcloud(filter(tri_count, Partei == "fdp")$trigram,
filter(tri_count, Partei == "fdp")$llr,
scale = c(4, .1), colors = "yellow3")
wordcloud(filter(tri_count, Partei == "cdu")$trigram,
filter(tri_count, Partei == "cdu")$llr/2,
scale = c(2, .01), colors = "black")
wordcloud(filter(tri_count, Partei == "gruene")$trigram,
filter(tri_count, Partei == "gruene")$llr,
scale = c(1.5, .01), colors = "green")
wordcloud(filter(tri_count, Partei == "afd")$trigram,
filter(tri_count, Partei == "afd")$llr,
scale = c(2, .01), colors = "blue")
dev.off()
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1,1))
